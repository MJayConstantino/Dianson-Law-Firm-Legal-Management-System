{
  "info": {
    "_postman_id": "05a3217b-3c76-4821-9e70-d27a9415aad9",
    "name": "JurisEase_AUTH_TEST",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "36962968"
  },
  "item": [
    {
      "name": "VALID_USER_TEST",
      "item": [
        {
          "name": "POST",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "\r",
                  "\r",
                  "// set initial mock data \r",
                  "if(!pm.collectionVariables.get('test_user_id')){\r",
                  "    pm.collectionVariables.set('test_user_id', 'e9c14776-0c63-4a74-bd76-1ee41b8eadcb')\r",
                  "}\r",
                  "if(!pm.collectionVariables.get('test_user_email')){\r",
                  "    pm.collectionVariables.set('test_user_email', 'test@example.com')\r",
                  "}\r",
                  "\r",
                  "if (!pm.collectionVariables.get('test_user_name')){\r",
                  "    pm.collectionVariables.set('test_user_name', 'Test User')\r",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "\r",
                  "pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));\r",
                  "\r",
                  "pm.test(\"Response contains inserted data\", () => {\r",
                  "  const jsonData = pm.response.json();\r",
                  "  pm.expect(jsonData.data).to.be.an(\"array\");\r",
                  "  pm.expect(jsonData.data[0]).to.have.property(\"user_id\");\r",
                  "  \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Inserted data contains correct user_id\", () => {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data[0].user_id).to.eql(pm.variables.get(\"test_user_id\"));\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlzdmVzZWdteGJ0Y2pnaXZwd2tsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDEzNTkxMTUsImV4cCI6MjA1NjkzNTExNX0.g6NIl_s07Cg3GFhNj-VTrZQC1CHDeGPzzgMOSMu5KzA",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"action\": \"POST\",\r\n  \"data\": {\r\n    \"user_id\": \"{{test_user_id}}\",\r\n    \"user_name\": \"{{test_user_name}}\",\r\n    \"user_email\": \"{{test_user_email}}\"\r\n  }\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{user_crud_url}}",
              "host": ["{{user_crud_url}}"]
            }
          },
          "response": []
        },
        {
          "name": "GET ALL USERS",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
                  "\r",
                  "pm.test(\"Response contains data or 404 error\", () => {\r",
                  "  const jsonData = pm.response.json();\r",
                  "  if (pm.response.code === 200) {\r",
                  "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                  "  } else if (pm.response.code === 404) {\r",
                  "    pm.expect(jsonData.error).to.include(\"No records found\");\r",
                  "  }\r",
                  "});\r",
                  "\r",
                  "// pm.test(\"Response time is below 1s\", function () {\r",
                  "//   pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "// });\r",
                  "var template = `\r",
                  "<style type=\"text/css\">\r",
                  "    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
                  "    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
                  "    .tftable tr {background-color:#ffffff;}\r",
                  "    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
                  "    .tftable tr:hover {background-color:#e0ffff;}\r",
                  "</style>\r",
                  "\r",
                  "<table class=\"tftable\" border=\"1\">\r",
                  "    <tr>\r",
                  "        <th>User ID</th>\r",
                  "        <th>User Name</th>\r",
                  "        <th>User Email</th>\r",
                  "    </tr>\r",
                  "    \r",
                  "    {{#each response.data}}\r",
                  "        <tr>\r",
                  "            <td>{{user_id}}</td>\r",
                  "            <td>{{user_name}}</td>\r",
                  "            <td>{{user_email}}</td>\r",
                  "        </tr>\r",
                  "    {{/each}}\r",
                  "</table>\r",
                  "`;\r",
                  "\r",
                  "function constructVisualizerPayload() {\r",
                  "    return {response: pm.response.json()}\r",
                  "}\r",
                  "\r",
                  "pm.visualizer.set(template, constructVisualizerPayload());\r",
                  "\r",
                  "console.log(pm.collectionVariables.get('bearer_token'));\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": ["\r", ""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlzdmVzZWdteGJ0Y2pnaXZwd2tsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDEzNTkxMTUsImV4cCI6MjA1NjkzNTExNX0.g6NIl_s07Cg3GFhNj-VTrZQC1CHDeGPzzgMOSMu5KzA",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"action\": \"GET_ALL\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{user_crud_url}}",
              "host": ["{{user_crud_url}}"]
            }
          },
          "response": []
        },
        {
          "name": "GET ONE USER",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "\r",
                  "pm.test(\"Status code is 200 or 404\", () => {\r",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
                  "});\r",
                  "\r",
                  "if(!pm.response.code == 404){\r",
                  "pm.test(\"Same user_id with mock_user\", () => {\r",
                  "    const response = pm.response.json();\r",
                  "   pm.expect(response.data.user_id).to.equal(pm.collectionVariables.get('test_user_id'))\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Same user_email with mock_user\", () => {\r",
                  "    const response = pm.response.json();\r",
                  "   pm.expect(response.data.user_email).to.equal(pm.collectionVariables.get('test_user_email'))\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Same user_name with mock_user\", () => {\r",
                  "    const response = pm.response.json();\r",
                  "   pm.expect(response.data.user_name).to.equal(pm.collectionVariables.get('test_user_name'))\r",
                  "});\r",
                  "}\r",
                  "\r",
                  "\r",
                  "pm.test(\"Valid error message for 404\", () => {\r",
                  "  const jsonData = pm.response.json();\r",
                  "  if (pm.response.code === 404) {\r",
                  "    pm.expect(jsonData.error).to.include(\"Record not found\");\r",
                  "  }\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlzdmVzZWdteGJ0Y2pnaXZwd2tsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDEzNTkxMTUsImV4cCI6MjA1NjkzNTExNX0.g6NIl_s07Cg3GFhNj-VTrZQC1CHDeGPzzgMOSMu5KzA",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"action\": \"GET_ONE\",\r\n  \"user_id\": \"{{test_user_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{user_crud_url}}",
              "host": ["{{user_crud_url}}"]
            }
          },
          "response": []
        },
        {
          "name": "UPDATE_USER",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "\r",
                  "pm.test(\"Status code is 200 or 404\", () => {\r",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
                  "});\r",
                  "\r",
                  "if(!pm.response.code == 404){\r",
                  "\r",
                  "pm.test(\"Updated user_email with mock_user\", () => {\r",
                  "    const response = pm.response.json();\r",
                  "   pm.expect(response.data[0].user_email).to.equal(pm.collectionVariables.get('test_update_user_email'))\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Updated user_name with mock_user\", () => {\r",
                  "    const response = pm.response.json();\r",
                  "   pm.expect(response.data[0].user_name).to.equal(pm.collectionVariables.get('test_update_user_name'))\r",
                  "});\r",
                  "\r",
                  "}\r",
                  "\r",
                  "pm.test(\"Valid error message for 404\", () => {\r",
                  "  const jsonData = pm.response.json();\r",
                  "  if (pm.response.code === 404) {\r",
                  "    pm.expect(jsonData.error).to.include(\"Record not found or no changes made\");\r",
                  "  }\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{USER_CRUD_TOKEN}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"action\": \"UPDATE_ONE\",\r\n  \"user_id\":\"{{test_user_id}}\",\r\n  \"data\": {\r\n    \"user_name\": \"{{test_update_user_name}}\",\r\n    \"user_email\": \"{{test_update_user_email}}\"\r\n  }\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{user_crud_url}}",
              "host": ["{{user_crud_url}}"]
            }
          },
          "response": []
        },
        {
          "name": "DELETE USER",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", () => {\r",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Valid error message for 404\", () => {\r",
                  "  const jsonData = pm.response.json();\r",
                  "  if (pm.response.code === 404) {\r",
                  "    pm.expect(jsonData.error).to.include(\"Record not found\");\r",
                  "  }\r",
                  "});\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bearer_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"action\": \"DELETE_ONE\",\r\n  \"user_id\": \"{{test_user_id}}\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{user_crud_url}}",
              "host": ["{{user_crud_url}}"]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "// Ensure Authorization header is set\r",
              "\r",
              "pm.test(\"Validate Bearer Token\", () => {\r",
              "    // Get the Authorization header from the request\r",
              "    const authHeader = pm.request.headers.get('Authorization');\r",
              "\r",
              "\r",
              "    const expectedToken = pm.collectionVariables.get('bearer_token');\r",
              "    pm.expect(authHeader).to.not.be.undefined; // Authorization header should exist\r",
              "\r",
              "    // Validate the Bearer token\r",
              "    pm.expect(authHeader).to.include(\"Bearer \"); \r",
              "    pm.expect(authHeader.split(' ')[1].trim()).to.equal(expectedToken); \r",
              "\r",
              "    console.log(\"Bearer Token is valid!\");\r",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "SAD TESTS",
      "item": [
        {
          "name": "UNAUThORIZED_ERROR",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 (Unauthorized)\", () => {\r",
                  "  pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "if(!pm.request.headers.get('Authorization')){\r",
                  "pm.test(\"Error message indicates missing authorization\", () => {\r",
                  "  const jsonData = pm.response.json();\r",
                  "  pm.expect(jsonData.code).to.equal(401);\r",
                  "  pm.expect(jsonData.message).to.include(\"Missing authorization header\");\r",
                  "});\r",
                  "}\r",
                  "\r",
                  "\r",
                  "pm.test(\"Authorization header value does not match collection variable bearer_token\", () => {\r",
                  "    const authHeader = pm.request.headers.get('Authorization');\r",
                  "    const bearerToken = \"Bearer \" + pm.collectionVariables.get('bearer_token');\r",
                  "    pm.expect(authHeader).to.not.equal(bearerToken);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"action\": \"GET_ALL\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{user_crud_url}}",
              "host": ["{{user_crud_url}}"]
            }
          },
          "response": []
        },
        {
          "name": "NOT FOUND ERROR",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response body contains 'Record not found'\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\"Record not found\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bearer_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"action\": \"GET_ONE\",\r\n  \"user_id\": \"{{test_user_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{user_crud_url}}",
              "host": ["{{user_crud_url}}"]
            }
          },
          "response": []
        },
        {
          "name": "BAD REQUEST",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.request.headers.add({\r",
                  "  key: \"Authorization\",\r",
                  "  value: `Bearer ${pm.environment.get(\"USER_CRUD_TOKEN\")}`,\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Verify status code is 400 Bad Request\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bearer_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"action\": \"POST\",\r\n  \"data\": {\r\n    \"user_id\": \"invalidid\",\r\n    \"user_name\": \"{{test_user_name}}\",\r\n    \"user_email\": \"{{test_user_email}}\"\r\n  }\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{user_crud_url}}",
              "host": ["{{user_crud_url}}"]
            }
          },
          "response": []
        },
        {
          "name": "INTERNAL_SERVER_ERROR",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"action\": \"POST\",\r\n  \"data\": {\r\n    \"user_id\": {{test_user_id}},\r\n    \"user_name\": \"{{test_user_name}}\",\r\n    \"user_email\": \"{{test_user_email}}\"\r\n  }\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{user_crud_url}}",
              "host": ["{{user_crud_url}}"]
            }
          },
          "response": []
        }
      ],
      "description": "The crud operations on the user with a clean up\n\n(done with supabase Edge functions)",
      "auth": {
        "type": "noauth"
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "// pm.environment.set(\"mockData\", JSON.stringify({\r",
              "//     user_id: \"12345\",\r",
              "//     user_name: \"Test User\",\r",
              "//     user_email: \"test@example.com\"\r",
              "// }));\r",
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "USER_CRUD_TOKEN",
      "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlzdmVzZWdteGJ0Y2pnaXZwd2tsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDEzNTkxMTUsImV4cCI6MjA1NjkzNTExNX0.g6NIl_s07Cg3GFhNj-VTrZQC1CHDeGPzzgMOSMu5KzA",
      "type": "string"
    },
    {
      "key": "bearer_token",
      "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlzdmVzZWdteGJ0Y2pnaXZwd2tsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDEzNTkxMTUsImV4cCI6MjA1NjkzNTExNX0.g6NIl_s07Cg3GFhNj-VTrZQC1CHDeGPzzgMOSMu5KzA",
      "type": "string"
    },
    {
      "key": "test_user_id",
      "value": "e9c14776-0c63-4a74-bd76-1ee41b8eadcb",
      "type": "string"
    },
    {
      "key": "test_user_name",
      "value": "Test User",
      "type": "string"
    },
    {
      "key": "test_user_email",
      "value": "test@example.com",
      "type": "string"
    },
    {
      "key": "user_crud_url",
      "value": "https://ysvesegmxbtcjgivpwkl.supabase.co/functions/v1/user-crud-actions",
      "type": "string"
    },
    {
      "key": "test_update_user_name",
      "value": "Updated Test User ",
      "type": "string"
    },
    {
      "key": "test_update_user_email",
      "value": "updated@example.com",
      "type": "string"
    }
  ]
}
